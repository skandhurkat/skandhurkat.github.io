<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on Skand Hurkat</title>
    <link>https://skandhurkat.com/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on Skand Hurkat</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; {year} Skand Hurkat. All rights reserved.</copyright>
    <lastBuildDate>Thu, 22 Jun 2017 11:05:43 -0400</lastBuildDate><atom:link href="https://skandhurkat.com/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Introduction to CTest</title>
      <link>https://skandhurkat.com/post/intro-to-ctest/</link>
      <pubDate>Thu, 22 Jun 2017 11:05:43 -0400</pubDate>
      
      <guid>https://skandhurkat.com/post/intro-to-ctest/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve seen a lot of people (I&amp;rsquo;m looking at you &lt;a href=&#34;//lemire.me&#34;&gt;Daniel
Lemire&lt;/a&gt;) praise newer languages like &lt;em&gt;Go&lt;/em&gt;, which makes me
sad as a C++ programmer. Well, that&amp;rsquo;s until I realise that most of the
features touted could be easily incorporated in C++ with just a bit of
elbow grease. In this post, I&amp;rsquo;ll show how to add an automated testing
system using CTest.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A bug in how GCC handles constructors</title>
      <link>https://skandhurkat.com/post/gcc-constructor-bug/</link>
      <pubDate>Tue, 23 May 2017 10:51:42 -0400</pubDate>
      
      <guid>https://skandhurkat.com/post/gcc-constructor-bug/</guid>
      <description>Some days ago, I became aware of a bug in GCC that has apparently existed since 2015. As this is a bug that deals with memory leaks, it is fairly serious.
In this case, I really don&amp;rsquo;t want to re-post the entire content of the source, so I will only list my experiments with reproducing the bug once I became aware of it.
C++ assumes that if a constructor fails, then no memory is allocated for the object at all.</description>
    </item>
    
    <item>
      <title>PSA: Don&#39;t use std::rand()</title>
      <link>https://skandhurkat.com/post/psa-dont-use-rand/</link>
      <pubDate>Sun, 16 Apr 2017 19:50:51 -0400</pubDate>
      
      <guid>https://skandhurkat.com/post/psa-dont-use-rand/</guid>
      <description>&lt;p&gt;With the &lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt; header in C++11 onwards, there really is no reason
to use &lt;code&gt;std::rand()&lt;/code&gt; to generate random numbers. In fact, using
&lt;code&gt;std::rand()&lt;/code&gt; could be really harmful.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On writing platform-independent code (or why I like the new C&#43;&#43;)</title>
      <link>https://skandhurkat.com/post/why-i-like-cpp11/</link>
      <pubDate>Sat, 16 Mar 2013 17:26:35 -0400</pubDate>
      
      <guid>https://skandhurkat.com/post/why-i-like-cpp11/</guid>
      <description>I use Linux when I work from home, I&amp;rsquo;m forced to use a Mac at work (well, I boot up a virtual Linux OS), and I use Windows when I just want to goof around with my computer. So, while most of my work is done on Linux, it&amp;rsquo;s imperative that my code work on all platforms; just because I could use any of the three.
Traditionally, C required multiple versions of code, protected by #ifdefs.</description>
    </item>
    
  </channel>
</rss>
